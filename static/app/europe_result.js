// Generated by CoffeeScript 1.10.0
App.module("Result", function(Mod, App, Backbone, Marionette, $, _) {
  var BadScreenLayout, BadTimeView, GoodScreenLayout, GreatTimeView, InfoView, LETTERS, LETTER_BACKSPACE, LETTER_ENTER, NAME_MAX_LENGTH, Name, Rank, Score, Time, TypewriterView1, TypewriterView2, _options, format_results, handler, layout, name, rank, time;
  Mod.startWithParent = false;
  NAME_MAX_LENGTH = 20 + 1;
  LETTER_BACKSPACE = '←';
  LETTER_ENTER = '✔';
  LETTERS = [
    {
      key: 'A',
      value: 'A'
    }, {
      key: 'Á',
      value: 'Á'
    }, {
      key: 'B',
      value: 'B'
    }, {
      key: 'C',
      value: 'C'
    }, {
      key: 'Č',
      value: 'Č'
    }, {
      key: 'D',
      value: 'D'
    }, {
      key: 'Ď',
      value: 'Ď'
    }, {
      key: 'E',
      value: 'E'
    }, {
      key: 'É',
      value: 'É'
    }, {
      key: 'Ě',
      value: 'Ě'
    }, {
      key: 'F',
      value: 'F'
    }, {
      key: 'G',
      value: 'G'
    }, {
      key: 'H',
      value: 'H'
    }, {
      key: 'I',
      value: 'I'
    }, {
      key: 'Í',
      value: 'Í'
    }, {
      key: 'J',
      value: 'J'
    }, {
      key: 'K',
      value: 'K'
    }, {
      key: 'L',
      value: 'L'
    }, {
      key: 'M',
      value: 'M'
    }, {
      key: 'N',
      value: 'N'
    }, {
      key: 'Ň',
      value: 'Ň'
    }, {
      key: 'O',
      value: 'O'
    }, {
      key: 'Ó',
      value: 'Ó'
    }, {
      key: 'P',
      value: 'P'
    }, {
      key: 'Q',
      value: 'Q'
    }, {
      key: 'R',
      value: 'R'
    }, {
      key: 'Ř',
      value: 'Ř'
    }, {
      key: 'S',
      value: 'S'
    }, {
      key: 'Š',
      value: 'Š'
    }, {
      key: 'T',
      value: 'T'
    }, {
      key: 'Ť',
      value: 'Ť'
    }, {
      key: 'U',
      value: 'U'
    }, {
      key: 'Ú',
      value: 'Ú'
    }, {
      key: 'Ů',
      value: 'Ů'
    }, {
      key: 'V',
      value: 'V'
    }, {
      key: 'W',
      value: 'W'
    }, {
      key: 'X',
      value: 'X'
    }, {
      key: 'Y',
      value: 'Y'
    }, {
      key: 'Ý',
      value: 'Ý'
    }, {
      key: 'Z',
      value: 'Z'
    }, {
      key: 'Ž',
      value: 'Ž'
    }, {
      key: ' ',
      value: '&nbsp;'
    }, {
      key: '0',
      value: '0'
    }, {
      key: '1',
      value: '1'
    }, {
      key: '2',
      value: '2'
    }, {
      key: '3',
      value: '3'
    }, {
      key: '4',
      value: '4'
    }, {
      key: '5',
      value: '5'
    }, {
      key: '6',
      value: '6'
    }, {
      key: '7',
      value: '7'
    }, {
      key: '8',
      value: '8'
    }, {
      key: '9',
      value: '9'
    }, {
      key: LETTER_BACKSPACE,
      value: SVG["delete"]
    }, {
      key: LETTER_ENTER,
      value: SVG.check
    }
  ];
  _options = void 0;
  time = void 0;
  rank = void 0;
  name = void 0;
  layout = void 0;
  format_results = function(data) {
    var answers, out;
    answers = data.answers.map(function(i) {
      return i.id + ":" + i.answer;
    });
    return out = {
      category: data.category.id,
      name: null,
      time: data.time,
      answers: answers.join(',')
    };
  };
  Time = Backbone.Model.extend({
    defaults: {
      time: void 0
    }
  });
  Rank = Backbone.Model.extend({
    defaults: {
      position: void 0,
      total: void 0,
      top: void 0
    },
    initialize: function(attributes, options) {
      return this.url = "/api/results/" + options.difficulty + "-" + options.category + "/" + options.time + "/" + options.correct;
    }
  });
  Name = Backbone.Model.extend({
    defaults: {
      name: '',
      letter: 'A'
    }
  });
  Score = Backbone.Model.extend({
    defaults: {
      name: void 0,
      time: void 0,
      category: void 0,
      difficulty: void 0,
      questions: void 0
    },
    url: '/api/score'
  });
  InfoView = Marionette.ItemView.extend({
    template: function(serialized_model) {
      return _.template("<h1><img src='<%= icon %>'><%= category %></h1>\n<h2><%= difficulty %></h2>")(serialized_model);
    }
  });
  GreatTimeView = Marionette.ItemView.extend({
    template: function(serialized_model) {
      return _.template("<%= show_time() %>")(serialized_model);
    },
    templateHelpers: function() {
      return {
        show_time: function() {
          return display_elapsed(this.time);
        }
      };
    }
  });
  BadTimeView = Marionette.ItemView.extend({
    template: function(serialized_model) {
      return _.template("<%= show_time() %>")(serialized_model);
    },
    templateHelpers: function() {
      return {
        show_time: function() {
          return display_elapsed(this.time);
        }
      };
    },
    initialize: function() {
      return window.channel.on('keypress', function(msg) {
        return window.channel.trigger('result:save', null);
      });
    },
    onDestroy: function() {
      return window.channel.off('keypress');
    }
  });
  TypewriterView1 = Marionette.ItemView.extend({
    template: function(serialized_model) {
      return _.template("<table><tr><%= show_name() %><td class=\"selected\"><%= show_letter() %></td><%= show_empty() %></tr></table>")(serialized_model);
    },
    templateHelpers: function() {
      return {
        show_letter: function() {
          var x;
          x = _.filter(LETTERS, (function(_this) {
            return function(i) {
              return i.key === _this.letter;
            };
          })(this));
          return x[0].value;
        },
        show_name: function() {
          var i, j, out, ref;
          out = "";
          for (i = j = 0, ref = this.name.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
            out += "<td>" + (this.name.charAt(i)) + "</td>";
          }
          return out;
        },
        show_empty: function() {
          var i, j, out, ref, rest;
          rest = NAME_MAX_LENGTH - this.name.length;
          out = "";
          if (rest > 1) {
            for (i = j = 1, ref = rest; 1 <= ref ? j < ref : j > ref; i = 1 <= ref ? ++j : --j) {
              out += "<td class='empty'>" + SVG.space + "</td>";
            }
          }
          return out;
        }
      };
    },
    initialize: function() {
      var that;
      that = this;
      this.model.on('change', function() {
        return that.render();
      });
      return window.channel.on('key', function(msg) {
        var _name, letter;
        clear_delay();
        if (msg === 'fire') {
          window.sfx.button2.play();
          letter = that.model.get('letter');
          _name = that.model.get('name');
          if (letter === LETTER_BACKSPACE) {
            if (_name.length > 0) {
              that.model.set('name', _name.substring(0, _name.length - 1));
            }
          } else if (letter === LETTER_ENTER) {
            if (_name.length > 0) {
              window.channel.trigger('result:save', _name);
              return;
            }
          } else if (_name.length < NAME_MAX_LENGTH - 1) {
            that.model.set('name', "" + _name + letter);
            _name = that.model.get('name');
          }
        }
        return set_delay(handler, _options.options.IDLE_RESULT);
      });
    },
    onDestroy: function() {
      window.channel.off('key');
      return this.model.off('change');
    }
  });
  TypewriterView2 = Marionette.ItemView.extend({
    template: function(serialized_model) {
      return _.template("<table><tr><%= show_alphabet() %></tr></table>")(serialized_model);
    },
    templateHelpers: function() {
      return {
        show_alphabet: function() {
          var i, letter, out;
          letter = this.letter;
          out = (function() {
            var j, ref, results;
            results = [];
            for (i = j = 0, ref = LETTERS.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
              results.push("<td" + (LETTERS[i].key === letter ? ' class=\"selected\"' : '') + ">" + LETTERS[i].value + "</td>");
            }
            return results;
          })();
          return out.join('');
        }
      };
    },
    initialize: function() {
      var that;
      that = this;
      this.model.on('change', function() {
        return that.render();
      });
      return window.channel.on('key', function(msg) {
        var _temp, index, letter;
        clear_delay();
        letter = that.model.get('letter');
        _temp = LETTERS.map(function(i) {
          return i.key === letter;
        });
        index = _temp.indexOf(true);
        if (msg === 'left') {
          if (index > 0) {
            index -= 1;
          } else {
            index = LETTERS.length - 1;
          }
          window.sfx.button.play();
          that.model.set('letter', LETTERS[index].key);
        } else if (msg === 'right') {
          if (index < (LETTERS.length - 1)) {
            index += 1;
          } else {
            index = 0;
          }
          window.sfx.button.play();
          that.model.set('letter', LETTERS[index].key);
        }
        return set_delay(handler, _options.options.IDLE_RESULT);
      });
    },
    onDestroy: function() {
      window.channel.off('key');
      return this.model.off('change');
    }
  });
  GoodScreenLayout = Marionette.LayoutView.extend({
    template: _.template("<div id=\"header\"></div>\n<div id=\"body\">\n    <table class=\"result good-result\">\n        <tr class=\"row-1\">\n            <td>\n                <h1>" + SVG.rekord + "Nový rekord!</h1>\n                <h2></h2>\n                <p style=\"text-transform:uppercase;\">Tvůj čas se dostal do žebříčku nejlepších. Zadej jméno svého týmu.</p>\n            </td>\n        </tr>\n        <tr class=\"row-2\">\n            <td class=\"typewriter\"></td>\n        </tr>\n        <tr class=\"row-3\">\n            <td></td>\n        </tr>\n        <tr class=\"row-4\">\n            <td>\n                <table class=\"help\">\n                    <tr>\n                        <td>" + SVG.left + "&nbsp;" + SVG.right + "</td>\n                        <td><p>Výběr znaku</p></td>\n                        <td>" + SVG.ok + "</td>\n                        <td><p>Potvrzení výběru</p></td>\n                        <td>" + SVG["delete"] + "</td>\n                        <td><p>Mazání znaku</p></td>\n                        <td>" + SVG.check + "</td>\n                        <td><p>Uložení jména</p></td>\n                    </tr>\n                </table>\n            </td>\n        </tr>\n    </table>\n</div>"),
    onRender: function() {
      return $('body').attr('class', 'layout-a');
    },
    regions: {
      info: '#header',
      time: '#body .row-1 h2',
      input: '.row-2 .typewriter',
      alphabet: '.row-3 td'
    }
  });
  BadScreenLayout = Marionette.LayoutView.extend({
    template: _.template("<div id=\"header\"></div>\n<div id=\"body\">\n    <table class=\"result bad-result\">\n        <tr class=\"row-1\">\n            <td>\n                <h1><img src=\"svg/rekord.svg\" />Dosažený čas</h1>\n                <h2></h2>\n            </td>\n        </tr>\n    </table>\n</div>"),
    onRender: function() {
      return $('body').attr('class', 'layout-a');
    },
    regions: {
      info: '#header',
      time: '#body .row-1 h2'
    }
  });
  handler = function() {
    var _name;
    _name = name.get('name');
    if (_name.length < 1) {
      _name = null;
    }
    return window.channel.trigger('result:save', _name);
  };
  Mod.onStart = function(options) {
    var correct;
    console.log('Result module');
    console.log(options);
    _options = options;
    time = new Time({
      time: options.time
    });
    correct = _.filter(options.answers, function(i) {
      return i.answer;
    });
    name = new Name();
    rank = new Rank(null, {
      difficulty: options.gamemode.difficulty,
      category: options.gamemode.category,
      time: options.time,
      correct: correct.length
    });
    rank.fetch();
    window.channel.on('result:save', function(_name) {
      var questions, score;
      clear_delay();
      questions = _.map(_options.answers, function(i) {
        return {
          question: i.id,
          correct: i.answer
        };
      });
      score = new Score({
        name: _name,
        time: _options.time,
        category: _options.gamemode.category,
        difficulty: _options.gamemode.difficulty,
        questions: questions,
        top: _name ? true : false
      });
      score.save();
      return score.on('sync', function() {
        window.channel.trigger('result:close', _options);
        return score.off('sync');
      });
    });
    rank.on('sync', function() {
      if (rank.get('top')) {
        window.sfx.surprise.play();
        layout = new GoodScreenLayout({
          el: make_content_wrapper()
        });
        layout.render();
        layout.getRegion('info').show(new InfoView({
          model: new Backbone.Model({
            'category': options.gamemode.title,
            'icon': options.gamemode.category_icon,
            'difficulty': options.gamemode.difficulty_title
          })
        }));
        layout.getRegion('time').show(new GreatTimeView({
          model: time
        }));
        layout.getRegion('input').show(new TypewriterView1({
          model: name
        }));
        return layout.getRegion('alphabet').show(new TypewriterView2({
          model: name
        }));
      } else {
        window.sfx.notsurprise.play();
        layout = new BadScreenLayout({
          el: make_content_wrapper()
        });
        layout.render();
        layout.getRegion('info').show(new InfoView({
          model: new Backbone.Model({
            'category': options.gamemode.title,
            'icon': options.gamemode.category_icon,
            'difficulty': options.gamemode.difficulty_title
          })
        }));
        return layout.getRegion('time').show(new BadTimeView({
          model: time
        }));
      }
    });
    return set_delay(handler, _options.options.IDLE_RESULT);
  };
  return Mod.onStop = function() {
    var score;
    clear_delay();
    time = void 0;
    rank.off('sync');
    rank = void 0;
    score = void 0;
    layout.destroy();
    return window.channel.off('result:save');
  };
});
