// Generated by CoffeeScript 1.10.0
App.module("Recap", function(Mod, App, Backbone, Marionette, $, _) {
  var BlankView, InfoView, Question, Questions, RecapItemView, RecapView, ScreenLayout, _options, handler, height, layout;
  Mod.startWithParent = false;
  _options = void 0;
  layout = void 0;
  height = void 0;
  Question = Backbone.Model.extend({
    idAttribute: 'id',
    defaults: {
      id: null,
      question: null,
      image: null,
      country: null,
      category: null,
      answer: null,
      image_css_recap: null
    }
  });
  Questions = Backbone.Collection.extend({
    model: Question
  });
  InfoView = Marionette.ItemView.extend({
    template: function(serialized_model) {
      return _.template("<h1><img src='<%= icon %>'><%= category %></h1>\n<h2><%= difficulty %></h2>")(serialized_model);
    }
  });
  RecapItemView = Marionette.ItemView.extend({
    tagName: "div",
    className: function() {
      var out;
      if (this.model.get('answer')) {
        out = "good";
      } else {
        out = "bad";
      }
      return "recap " + out;
    },
    attributes: function() {
      var out;
      out = {
        style: "height:" + height + "px"
      };
      return out;
    },
    template: function(serialized_model) {
      if (serialized_model.image && serialized_model.question) {
        return _.template("<table class=\"text\" style=\"height:" + height + "px;width:50%\">\n    <tr>\n        <td><%= shorten_question(50) %></td>\n    </tr>\n    <tr>\n        <td><%= country.title %></td>\n    </tr>\n</table>\n<div style=\"height:" + height + "px;\" class=\"img\"><img style=\"<%= image_css_recap %>\" src=\"<%= image %>\" /></div>")(serialized_model);
      } else if (serialized_model.image) {
        return _.template("<table class=\"text\" style=\"height:" + height + "px;width:50%\">\n    <tr>\n        <td style=\"vertical-align:middle\"><%= country.title %></td>\n    </tr>\n</table>\n<div style=\"height:" + height + "px;\" class=\"img\"><img style=\"<%= image_css_recap %>\" src=\"<%= image %>\" /></div>")(serialized_model);
      } else {
        if (serialized_model.country.title === serialized_model.question) {
          return _.template("<table class=\"text\" style=\"height:" + height + "px;width:100%\">\n    <tr>\n        <td style=\"vertical-align:middle;font-weight:900\"><%= country.title %></td>\n    </tr>\n</table>")(serialized_model);
        } else {
          return _.template("<table class=\"text\" style=\"height:" + height + "px;width:100%\">\n    <tr>\n        <td><%= shorten_question(70) %></td>\n    </tr>\n    <tr>\n        <td><%= country.title %></td>\n    </tr>\n</table>")(serialized_model);
        }
      }
    },
    templateHelpers: function() {
      return {
        shorten_question: function(length) {
          return shorten(this.question, length);
        }
      };
    }
  });
  BlankView = Marionette.ItemView.extend({
    template: "<p>Nahrávám...</p>"
  });
  RecapView = Marionette.CollectionView.extend({
    childView: RecapItemView,
    emptyView: BlankView
  });
  ScreenLayout = Marionette.LayoutView.extend({
    template: _.template("<div id=\"header\"></div>\n<div id=\"body\"></div>"),
    onRender: function() {
      return $('body').attr('class', 'layout-a');
    },
    regions: {
      info: '#header',
      recap: '#body'
    }
  });
  handler = function() {
    return window.channel.trigger('recap:close', _options);
  };
  Mod.onStart = function(options) {
    var info, questions;
    console.log('Recap module');
    console.log(options);
    _options = options;
    height = calc_optimal_height(Math.ceil(options.answers.length / 2), 20);
    layout = new ScreenLayout({
      el: make_content_wrapper()
    });
    layout.render();
    questions = new Questions(options.questions, {
      category: options.gamemode.category,
      difficulty: options.gamemode.difficulty
    });
    info = new Backbone.Model({
      category: options.gamemode.title,
      icon: options.gamemode.category_icon,
      difficulty: options.gamemode.difficulty_title
    });
    layout.getRegion('info').show(new InfoView({
      model: info
    }));
    layout.getRegion('recap').show(new RecapView({
      collection: questions
    }));
    window.channel.on('key', function(msg) {
      var set_new_timeout;
      set_new_timeout = true;
      if (msg === 'fire' || msg === 'left' || msg === 'right') {
        window.sfx.button2.play();
        set_delay(function() {
          return window.channel.trigger('recap:close', _options);
        }, 100);
        set_new_timeout = false;
      } else {
        set_new_timeout = false;
      }
      if (set_new_timeout) {
        window.sfx.button.play();
        return set_delay(handler, _options.options.IDLE_RECAP);
      }
    });
    return set_delay(handler, _options.options.IDLE_RECAP);
  };
  return Mod.onStop = function() {
    window.channel.off('key');
    clear_delay();
    layout.destroy();
    return layout = void 0;
  };
});
