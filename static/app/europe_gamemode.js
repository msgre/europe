// Generated by CoffeeScript 1.10.0
App.module("GameMode", function(Mod, App, Backbone, Marionette, $, _) {
  var CategoryItemView, Item, ItemView, Items, ItemsView, ScreenLayout, _options, categories, choices, difficulties, handler, layout, local_channel, padding;
  Mod.startWithParent = false;
  _options = void 0;
  layout = void 0;
  difficulties = void 0;
  categories = void 0;
  choices = void 0;
  local_channel = void 0;
  padding = void 0;
  Item = Backbone.Model.extend({
    idAttribute: 'id',
    defaults: {
      id: void 0,
      title: void 0,
      active: false,
      order: 1
    }
  });
  Items = Backbone.Collection.extend({
    model: Item,
    comparator: 'order',
    initialize: function(models, options) {
      this.active_length = null;
      if (_.isObject(options) && _.has(options, 'enabled')) {
        this._enabled = options.enabled;
      } else {
        this._enabled = false;
      }
      return this._enabled_map = null;
    },
    parse: function(response, options) {
      return response.results;
    },
    set_active: function(index) {
      var obj;
      if (this.get_enabled_length() < 1) {
        return;
      }
      if (!index || index < 0 || index >= this.get_enabled_length()) {
        index = 0;
      }
      obj = this.at_enabled(index);
      if (obj !== void 0) {
        this.each(function(i) {
          if (i.get('active')) {
            return i.set('active', false);
          }
        });
        obj.set('active', true);
      }
      this.trigger('change');
      return index;
    },
    get_enabled_length: function() {
      var x;
      if (this._enabled) {
        if (this.active_length === null) {
          x = this.filter(function(i) {
            return i.get('enabled');
          });
          this.active_length = x.length;
        }
      } else {
        this.active_length = this.length;
      }
      return this.active_length;
    },
    get_enabled_map: function() {
      var out, y;
      if (this._enabled_map !== null) {
        return this._enabled_map;
      } else {
        out = {};
        if (this._enabled) {
          y = 0;
          this.each(function(item, idx) {
            if (item.get('enabled')) {
              out[y] = idx;
              return y = y + 1;
            }
          });
        }
        return this._enabled_map = out;
      }
    },
    at_enabled: function(index) {
      var obj;
      if (this._enabled) {
        obj = this.at(this.get_enabled_map()[index]);
      } else {
        obj = this.at(index);
      }
      return obj;
    },
    unset_active: function() {
      return this.each(function(i) {
        return i.set('active', false);
      });
    }
  });
  ItemView = Marionette.ItemView.extend({
    tagName: "div",
    className: function() {
      return "button " + (this.model.get('classes')) + " " + (this.model.get('active') ? 'active' : '');
    },
    template: function(serialized_model) {
      return _.template("<p><%= title %></p>")(serialized_model);
    }
  });
  ItemsView = Marionette.CollectionView.extend({
    childView: ItemView,
    initialize: function(options) {
      this.index = 0;
      this.command = options.command;
      return this.collection.on('change', (function(_this) {
        return function() {
          return _this.render();
        };
      })(this));
    },
    set_key_handler: function() {
      return window.channel.on('key', (function(_this) {
        return function(msg) {
          var change_collection, obj, old_index;
          old_index = _this.index;
          change_collection = false;
          if (msg === 'left' && _this.index > 0) {
            window.sfx.button.play();
            set_delay(handler, _options.options.IDLE_GAMEMODE);
            _this.index -= 1;
            change_collection = true;
          } else if (msg === 'right' && _this.index < _this.collection.get_enabled_length() - 1) {
            window.sfx.button.play();
            set_delay(handler, _options.options.IDLE_GAMEMODE);
            _this.index += 1;
            change_collection = true;
          } else if (msg === 'fire') {
            window.sfx.button2.play();
            if (_this.command !== 'done') {
              set_delay(handler, _options.options.IDLE_GAMEMODE);
            }
            obj = _this.collection.at_enabled(_this.index);
            _this.disable_keys();
            local_channel.trigger(_this.command, obj);
          }
          if (change_collection && old_index !== _this.index) {
            return _this.collection.set_active(_this.index);
          }
        };
      })(this));
    },
    enable_keys: function() {
      return this.set_key_handler();
    },
    disable_keys: function() {
      return window.channel.off('key');
    },
    onDestroy: function() {
      this.collection.off('change');
      return this.disable_keys();
    },
    set_active: function() {
      this.index = 0;
      this.collection.set_active(this.index);
      return this.enable_keys();
    },
    reset: function() {
      this.disable_keys();
      this.collection.unset_active();
      return this.index = 0;
    }
  });
  CategoryItemView = Marionette.ItemView.extend({
    tagName: "div",
    className: function() {
      return "button button-1-4 " + (this.model.get('active') ? 'active' : '') + " " + (!this.model.get('enabled') ? 'disabled' : '');
    },
    template: function(serialized_model) {
      return _.template("<p<% if (!enabled) {%> class='disabled'<% } %>><img src='<%= icon %>'/><%= title %></p>")(serialized_model);
    }
  });
  ScreenLayout = Marionette.LayoutView.extend({
    template: _.template("<div id=\"body\">\n    <table class=\"gamemode\">\n        <tr class=\"row-1\">\n            <td></td>\n        </tr>\n        <tr class=\"row-2\">\n            <td></td>\n        </tr>\n        <tr class=\"row-3\">\n            <td></td>\n        </tr>\n    </table>\n</div>"),
    onRender: function() {
      return $('body').attr('class', 'layout-c');
    },
    regions: {
      difficulty: '.row-1 td',
      category: '.row-2 td',
      choice: '.row-3 td'
    }
  });
  handler = function() {
    return window.channel.trigger('gamemode:idle', _options);
  };
  Mod.onStart = function(options) {
    var local_options;
    console.log('Gamemode module');
    console.log(options);
    _options = options;
    local_channel = Backbone.Radio.channel('gamemode');
    layout = new ScreenLayout({
      el: make_content_wrapper()
    });
    layout.render();
    difficulties = new Items;
    difficulties.add(new Item({
      id: _options.constants.DIFFICULTY_EASY,
      title: 'Jednoduchá hra',
      active: false,
      classes: 'button-2-4',
      order: 1
    }));
    difficulties.add(new Item({
      id: _options.constants.DIFFICULTY_HARD,
      title: 'Obtížná hra',
      active: false,
      classes: 'button-2-4',
      order: 2
    }));
    choices = new Items;
    choices.add(new Item({
      id: 'ok',
      title: 'Hrát',
      active: false,
      classes: 'button-3-4',
      order: 1
    }));
    choices.add(new Item({
      id: 'repeat',
      title: 'Vybrat znovu',
      active: false,
      classes: 'button-1-4',
      order: 2
    }));
    layout.getRegion('difficulty').show(new ItemsView({
      collection: difficulties,
      command: 'category'
    }));
    categories = new Items(null, {
      enabled: true
    });
    categories.url = '/api/categories';
    layout.getRegion('category').show(new ItemsView({
      childView: CategoryItemView,
      collection: categories,
      command: 'choice'
    }));
    layout.getRegion('choice').show(new ItemsView({
      collection: choices,
      command: 'done'
    }));
    categories.on('sync', function(method, collection) {
      var rows;
      rows = Math.ceil(collection.count / 4);
      if (rows >= 3) {
        padding = 0;
      } else if (rows === 2) {
        padding = 70;
      } else {
        padding = 140;
      }
      $('.row-1 td').css("padding-top", padding);
      return $('.row-3 td').css("padding-bottom", padding);
    });
    categories.fetch();
    local_options = {};
    local_channel.on('category', function(obj) {
      local_options['difficulty'] = obj.get('id');
      local_options['difficulty_title'] = obj.get('title');
      return layout.getRegion('category').currentView.set_active();
    });
    local_channel.on('choice', function(obj) {
      local_options['category'] = obj.get('id');
      local_options['category_icon'] = obj.get('icon');
      local_options['title'] = obj.get('title');
      if (local_options.difficulty === _options.constants.DIFFICULTY_EASY) {
        local_options['time'] = obj.get('time_easy');
        local_options['penalty'] = obj.get('penalty_easy');
      } else {
        local_options['time'] = obj.get('time_hard');
        local_options['penalty'] = obj.get('penalty_hard');
      }
      return layout.getRegion('choice').currentView.set_active();
    });
    local_channel.on('done', function(obj) {
      if (obj.get('id') === 'ok') {
        return window.channel.trigger('gamemode:close', _.extend(_options, {
          gamemode: local_options
        }));
      } else {
        local_options = {};
        layout.getRegion('difficulty').currentView.reset();
        layout.getRegion('category').currentView.reset();
        layout.getRegion('choice').currentView.reset();
        return layout.getRegion('difficulty').currentView.set_active();
      }
    });
    layout.getRegion('difficulty').currentView.set_active();
    return set_delay(handler, _options.options.IDLE_GAMEMODE);
  };
  return Mod.onStop = function() {
    clear_delay();
    layout.destroy();
    choices = void 0;
    categories = void 0;
    difficulties = void 0;
    local_channel.off('done');
    local_channel.off('choice');
    local_channel.off('category');
    return local_channel.reset();
  };
});
