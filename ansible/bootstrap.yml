---
- name: Bootstrap Europe machine
  hosts: europe
  remote_user: root
  gather_facts: no
  vars:
    app_dir: /src/europe
    home_dir: /root
    app_conf_dir: "{{home_dir}}/europe"
    docker_compose_override: "docker-compose.devel.yml"

  tasks:
    # -- basic 

    - name: Update apt
      apt: update_cache=yes
      tags:
        - basic

    - name: Install basic system packages
      apt: name={{item}}
      with_items:
        - vim
        - git
        - python-pip
      tags:
        - basic

    - name: Upgrade pip
      command: pip install --upgrade pip

    - name: Install Python packages for easier HW debugging
      pip: name={{item}}
      with_items:
        - pyserial
        - minimalmodbus

    # -- docker

    - name: Add apt key
      apt_key:
        keyserver: hkp://p80.pool.sks-keyservers.net:80
        id: 58118E89F3A912897C070ADBF76221572C52609D
      tags:
        - docker
      
    - name: Create sources.list docker file
      file:
        state: touch
        path: /etc/apt/sources.list.d/docker.list
      tags:
        - docker

    - name: Update sources.list docker file
      lineinfile:
        dest: /etc/apt/sources.list.d/docker.list
        regexp: ^deb\s+https://apt.dockerproject.org/repo\s+ubuntu-trusty\s+main$
        line: deb https://apt.dockerproject.org/repo ubuntu-trusty main
      tags:
        - docker

    - name: Update apt
      apt: update_cache=yes
      tags:
        - docker

    - name: Get kernel ID
      command: uname -r
      register: uname
      tags:
        - docker

    - name: Install Docker packages
      apt: name={{item}}
      with_items:
        - linux-image-extra-{{uname.stdout}}
        - docker-engine
      tags:
        - docker

    - name: Add user europe to docker group
      command: usermod -aG docker europe
      tags:
        - docker

    - name: Start docker daemon
      service:
        name: docker
        state: started
      tags:
        - docker

    - name: Docker conf dir in home
      file:
        path: "{{home_dir}}/.docker"
        state: directory
      tags:
        - docker

    # -- docker-compose

    - name: Download docker-compose binary
      raw: curl -L https://github.com/docker/compose/releases/download/1.6.2/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose
      tags:
        - docker-compose

    - name: Make docker-compose executable
      file:
        path: /usr/local/bin/docker-compose
        mode: 0755
      tags:
        - docker-compose

    - name: BASH autocomplete for docker-compose
      raw: curl -L https://raw.githubusercontent.com/docker/compose/$(docker-compose version --short)/contrib/completion/bash/docker-compose > /etc/bash_completion.d/docker-compose
      tags:
        - docker-compose

    # -- system configuration

    - name: Put docker aliases into ~/.bashrc
      lineinfile:
        dest: /home/europe/.bashrc
        regexp: ^alias d="docker"$
        line: alias d="docker"
      tags:
        - systemconf

    - name: Put docker-compose aliases into ~/.bashrc
      lineinfile:
        dest: /home/europe/.bashrc
        regexp: ^alias dc="docker-compose"$
        line: alias dc="docker-compose"
      tags:
        - systemconf

    - name: Copy .vimrc file
      copy:
        src: files/vimrc
        dest: /home/europe/.vimrc
        owner: europe
        group: europe
        mode: 0644
      tags:
        - systemconf

    - name: Copy .vim directory
      unarchive:
        src: files/vim.tgz
        dest: /home/europe/
        owner: europe
        group: europe
        mode: 0644
      tags:
        - systemconf

    - name: Change user/group on unpacked ~/.vim directory
      file:
        path: /home/europe/.vim
        owner: europe
        group: europe
        recurse: yes
      tags:
        - systemconf

    # http://sourcedigit.com/15388-turn-off-disable-update-manager-ubuntu-automatic-updates-in-ubuntu-14-0414-10/
    - name: Remove Update Manager from Ubuntu
      apt:
        name: update-manager
        state: absent
      tags:
        - systemconf

    # -- prepare "kiosk"

    - name: Install kiosk packages
      apt: name={{item}}
      with_items:
        - lxde
        - chromium-browser
        - unclutter
      tags:
        - kiosk

    - name: Make LXDE configuration directory
      file:
        path: /home/europe/.config/lxsession/LXDE
        owner: europe
        group: europe
        state: directory
        recurse: yes
      tags:
        - kiosk

    - name: LXDE configuration file
      copy:
        src: files/autostart
        dest: /home/europe/.config/lxsession/LXDE/autostart
        owner: europe
        group: europe
      tags:
        - kiosk

    # -- application

    - name: Prepare directory for application source codes
      file: 
        path: "{{app_dir}}"
        state: directory
      tags:
        - app
        - sources

    - name: Get application sources from GitHub
      git: 
        repo: git@github.com:msgre/europe.git
        dest: "{{app_dir}}"
        accept_hostkey: yes
      tags:
        - app
        - sources
    
    # -- application config

    - name: Prepare directory for application configuration
      file:
        path: "{{app_conf_dir}}"
        state: directory
      tags:
        - app
        - config

    - name: Copy Nginx configuration file
      copy:
        src: files/europe.nginx.conf
        dest: "{{app_conf_dir}}/"
      tags:
        - app
        - config

    - name: Check .secret_key file presence
      stat: 
        path: "{{app_conf_dir}}/.secret_key"
      register: secret_key_file
      tags:
        - app
        - config

    - name: Copy helper script for generating .secret_key file
      template: 
        src: templates/generate_secret_key.sh.j2
        dest: "{{app_conf_dir}}/generate_secret_key.sh"
        mode: 0755
      tags:
        - app
        - config

    - name: Generate .secret_key file
      command: ./generate_secret_key.sh
      args:
        chdir: "{{app_conf_dir}}"
      when: not secret_key_file.stat.exists
      tags:
        - app
        - config

    # -- build

    - name: Build base application image
      command: docker build -f Dockerfile.base -t msgre/common:europe-base.latest .
      args:
        chdir: "{{app_dir}}"
      tags:
        - build

    - name: Build images specified in docker-compose
      command: docker-compose build
      args:
        chdir: "{{app_dir}}"
      tags:
        - build

    - name: Build watcher image
      command: docker build -t msgre/common:europe-watcher.latest .
      args:
        chdir: "{{app_dir}}/watcher"
      tags:
        - build

    - name: Override docker-compose settings
      file:
        src: "{{app_dir}}/{{docker_compose_override}}"
        dest: "{{app_dir}}/docker-compose.override.yml"
        state: link
      tags:
        - build

    - name: Run admin container
      command: docker-compose up -d admin
      environment:
        PWD: "{{app_dir}}"
      args:
        chdir: "{{app_dir}}"
      tags:
        - build
        - initial
  
    - name: Run Django application DB migration
      command: docker exec -ti admin ./manage.py migrate --noinput
      args:
        chdir: "{{app_dir}}"
      tags:
        - build
        - initial

    - name: Fill Django DB with initial data
      command: docker exec -ti admin ./manage.py initial_questions /content
      args:
        chdir: "{{app_dir}}"
      tags:
        - build
        - initial

    - name: Fill Django DB with fake results data
      command: docker exec -ti admin ./manage.py fake_results
      args:
        chdir: "{{app_dir}}"
      tags:
        - build
        - initial

    - name: Kill admin container
      command: docker-compose kill admin
      environment:
        PWD: "{{app_dir}}"
      args:
        chdir: "{{app_dir}}"
      tags:
        - build
        - initial

    - name: Remove admin container
      command: docker-compose rm -f admin
      environment:
        PWD: "{{app_dir}}"
      args:
        chdir: "{{app_dir}}"
      tags:
        - build
        - initial

    - name: Start docke-compose
      command: docker-compose up -d
      environment:
        PWD: "{{app_dir}}"
      args:
        chdir: "{{app_dir}}"
      tags:
        - start

    - name: We are done, reboot NUC
      command: reboot
      tags:
        - done
